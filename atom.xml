<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://weakcc.github.io</id>
    <title>腰盐醋</title>
    <updated>2020-10-27T01:24:52.445Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://weakcc.github.io"/>
    <link rel="self" href="http://weakcc.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>http://weakcc.github.io/images/avatar.png</logo>
    <icon>http://weakcc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 腰盐醋</rights>
    <entry>
        <title type="html"><![CDATA[Python正则]]></title>
        <id>http://weakcc.github.io/post/python-zheng-ze/</id>
        <link href="http://weakcc.github.io/post/python-zheng-ze/">
        </link>
        <updated>2020-10-27T01:23:45.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="http://weakcc.github.io/post-images/1603761872681.jpeg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python装饰器]]></title>
        <id>http://weakcc.github.io/post/python-zhuang-shi-qi/</id>
        <link href="http://weakcc.github.io/post/python-zhuang-shi-qi/">
        </link>
        <updated>2020-10-27T01:06:05.000Z</updated>
        <summary type="html"><![CDATA[<p><code>装饰器(Decorator)</code>本质上就是个接受一个函数作为参数，并返回一个函数的高阶函数。</p>
<p><b>装饰器的作用</b>：可以在代码运行期间动态增加函数功能，即动态扩展函数功能的作用。</p>
]]></summary>
        <content type="html"><![CDATA[<p><code>装饰器(Decorator)</code>本质上就是个接受一个函数作为参数，并返回一个函数的高阶函数。</p>
<p><b>装饰器的作用</b>：可以在代码运行期间动态增加函数功能，即动态扩展函数功能的作用。</p>
<!-- more -->
<h3 id="第一步">第一步</h3>
<p>准备一个简单的函数，并知道函数也是一个对象，这个对象有一个 <code>_name_</code> 的属性。</p>
<pre><code class="language-python">def show(a, b):
    print(a, b)

show(1, 2)
print(show.__name__)

# 1 2
# show
</code></pre>
<h3 id="第二步">第二步</h3>
<p>装饰器简单语法的使用以及@语法的使用。</p>
<pre><code class="language-python">def log(func):
    def wrapper(*args, **kwargs):
        print(&quot;我在show之前打印&quot;)
        func(*args, **kwargs)
        print(&quot;我在show之后打印&quot;)
    return wrapper

@log
def show(a, b):
    print(a, b)

show(1, 2)
print(show.__name__)

# 我在show之前打印
# 1 2
# 我在show之后打印
# wrapper
</code></pre>
<blockquote>
<p>扩展了 <code>show</code> 函数本身的功能，调用函数对象 <code>__name__</code> 的属性得到不再是 <code>show</code> 而是 <code>wrapper</code>，显示是不合理的。</p>
</blockquote>
<h3 id="第三步">第三步</h3>
<p>一个完整的 <code>decorator</code> 的写法，<code>functools</code> 库的调用，<code>@functools.wrap()</code> 的使用。</p>
<pre><code class="language-python">import functools
def log(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        print(&quot;我在show之前打印&quot;)
        func(*args, **kwargs)
        print(&quot;我在show之后打印&quot;)
    return wrapper

@log
def show(a, b):
    print(a, b)

show(1, 2)
print(show.__name__)

# 我在show之前打印
# 1 2
# 我在show之后打印
# show
</code></pre>
<h3 id="第四步">第四步</h3>
<p>学会当一个装饰器本身需要传入参数时，如何写装饰器。</p>
<pre><code class="language-python">import functools
def log(text):
    def decor(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            print(&quot;我在show之前打印&quot;)
            print(&quot;====&quot;, text, &quot;====&quot;)
            func(*args, **kwargs)
            print(&quot;我在show之后打印&quot;)
        return wrapper
    return decor

@log(&quot;我是传入的参数&quot;)
def show(a, b):
    print(a, b)

show(1, 2)
print(show.__name__)

# 我在show之前打印
# ==== 我是传入的参数 ====
# 1 2
# 我在show之后打印
# show
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python类多继承]]></title>
        <id>http://weakcc.github.io/post/python-lei-duo-ji-cheng/</id>
        <link href="http://weakcc.github.io/post/python-lei-duo-ji-cheng/">
        </link>
        <updated>2020-10-26T00:35:27.000Z</updated>
        <summary type="html"><![CDATA[<p>Python的类如果继承了多个类，那么其寻找方法的方式有两种，分别是：深度优先和广度优先。<br>
<img src="http://weakcc.github.io/post-images/1603672655150.jpg" alt="" loading="lazy"></p>
<ul>
<li>当类是经典类时，多继承情况下，会按照深度优先方式查找</li>
<li>当类是新式类时，多继承情况下，会按照广度优先方式查找</li>
</ul>]]></summary>
        <content type="html"><![CDATA[<p>Python的类如果继承了多个类，那么其寻找方法的方式有两种，分别是：深度优先和广度优先。<br>
<img src="http://weakcc.github.io/post-images/1603672655150.jpg" alt="" loading="lazy"></p>
<ul>
<li>当类是经典类时，多继承情况下，会按照深度优先方式查找</li>
<li>当类是新式类时，多继承情况下，会按照广度优先方式查找</li>
</ul>
<!-- more -->
<blockquote>
<p>经典类和新式类，从字面上可以看出一个老一个新，新的必然包含了跟多的功能，也是之后推荐的写法，从写法上区分的话，如果 当前类或者父类继承了 <code>object</code> 类，那么该类便是新式类，否则便是经典类。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://weakcc.github.io/post-images/1603672935665.jpg" alt="" loading="lazy"></figure>
<h3 id="经典类多继承">经典类多继承</h3>
<pre><code class="language-python">class D:

    def bar(self):
        print('D.bar')

class C(D):

    def bar(self):
        print('C.bar')

class B(D):

    def bar(self):
        print('B.bar')

class A(B, C):

    def bar(self):
        print('A.bar')

a = A()
# 执行bar方法时
# 首先去A类中查找，
# 如果A类中没有，则继续去B类中找，
# 如果B类中么有，则继续去D类中找，
# 如果D类中么有，则继续去C类中找，
# 如果还是未找到，则报错
# 所以，查找顺序：A --&gt; B --&gt; D --&gt; C
# 在上述查找bar方法的过程中，一旦找到，则寻找过程立即中断，便不会再继续找了
a.bar()
</code></pre>
<h3 id="新式类多继承">新式类多继承</h3>
<pre><code class="language-python">class D(object):

    def bar(self):
        print('D.bar')

class C(D):

    def bar(self):
        print('C.bar')

class B(D):

    def bar(self):
        print('B.bar')

class A(B, C):

    def bar(self):
        print('A.bar')

a = A()
# 执行bar方法时
# 首先去A类中查找，
# 如果A类中没有，则继续去B类中找，
# 如果B类中么有，则继续去C类中找，
# 如果C类中么有，则继续去D类中找，
# 如果还是未找到，则报错
# 所以，查找顺序：A --&gt; B --&gt; C --&gt; D
# 在上述查找bar方法的过程中，一旦找到，则寻找过程立即中断，便不会再继续找了
a.bar()
</code></pre>
<p>经典类：首先去A类中查找，如果A类中没有，则继续去B类中找，如果B类中么有，则继续去D类中找，如果D类中么有，则继续去C类中找，如果还是未找到，则报错</p>
<p>新式类：首先去A类中查找，如果A类中没有，则继续去B类中找，如果B类中么有，则继续去C类中找，如果C类中么有，则继续去D类中找，如果还是未找到，则报错</p>
<p>注意：在上述查找过程中，一旦找到，则寻找过程立即中断，便不会再继续找了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scrapy]]></title>
        <id>http://weakcc.github.io/post/scrapy/</id>
        <link href="http://weakcc.github.io/post/scrapy/">
        </link>
        <updated>2020-09-04T09:25:53.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="http://weakcc.github.io/post-images/1599211588406.png" alt="" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="http://weakcc.github.io/post-images/1599211588406.png" alt="" loading="lazy"></figure>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis 基础指令]]></title>
        <id>http://weakcc.github.io/post/redis-ji-chu-zhi-ling/</id>
        <link href="http://weakcc.github.io/post/redis-ji-chu-zhi-ling/">
        </link>
        <updated>2020-08-31T03:38:45.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="http://weakcc.github.io/post-images/1598845148125.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>