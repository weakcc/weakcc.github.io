<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://weakcc.github.io</id>
    <title>腰盐醋</title>
    <updated>2021-11-11T06:13:54.560Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://weakcc.github.io"/>
    <link rel="self" href="http://weakcc.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>http://weakcc.github.io/images/avatar.png</logo>
    <icon>http://weakcc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 腰盐醋</rights>
    <entry>
        <title type="html"><![CDATA[Laravel 速查表]]></title>
        <id>http://weakcc.github.io/post/laravel-su-cha-biao/</id>
        <link href="http://weakcc.github.io/post/laravel-su-cha-biao/">
        </link>
        <updated>2021-11-11T06:09:21.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://learnku.com/docs/laravel-cheatsheet/8.x">Laravel速查表</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP 速查表]]></title>
        <id>http://weakcc.github.io/post/php-su-cha-biao/</id>
        <link href="http://weakcc.github.io/post/php-su-cha-biao/">
        </link>
        <updated>2021-11-10T10:03:53.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://www.p2hp.com/phpfuncs.html">PHP 速查表</a></p>
<h1 id="本地服务器">本地服务器</h1>
<pre><code class="language-php">php -S localhost:3000
</code></pre>
<h1 id="注释">注释</h1>
<pre><code class="language-php">// 单行注释

/*
这是一个多行注释块
跨越多行
*/
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://www.p2hp.com/phpfuncs.html">PHP 速查表</a></p>
<h1 id="本地服务器">本地服务器</h1>
<pre><code class="language-php">php -S localhost:3000
</code></pre>
<h1 id="注释">注释</h1>
<pre><code class="language-php">// 单行注释

/*
这是一个多行注释块
跨越多行
*/
</code></pre>
<!-- more -->
<h1 id="命名约定">命名约定</h1>
<h2 id="开始结束-标记">开始/结束 标记</h2>
<pre><code class="language-php">&lt;?php
  echo &quot;Hello World&quot;;
?&gt;
</code></pre>
<h2 id="如果没有结束标记文件的其余部分将被视为-php-代码">如果没有结束标记，文件的其余部分将被视为 PHP 代码</h2>
<pre><code class="language-php">&lt;?php
  echo &quot;Hello World&quot;;
</code></pre>
<h2 id="简短的-php-语法输出">简短的 PHP 语法输出</h2>
<pre><code class="language-php">&lt;?= &quot;Hello World&quot; ?&gt;
</code></pre>
<h2 id="启用严格模式-它必须在-php-文件的第一行">启用严格模式 (它必须在 PHP 文件的第一行)</h2>
<pre><code class="language-php">&lt;? declare(strict_types=1);
</code></pre>
<h2 id="包括一个-php-文件">包括一个 PHP 文件</h2>
<pre><code class="language-php">require 'app/Product.php'
</code></pre>
<h2 id="创建命名空间">创建命名空间</h2>
<pre><code class="language-php">namespace App;
</code></pre>
<h2 id="使用命名空间">使用命名空间</h2>
<pre><code class="language-php">use App\Product;
</code></pre>
<h2 id="小驼峰命名">小驼峰命名</h2>
<pre><code class="language-php">$firstName = 'Mike'

function updateProduct()
</code></pre>
<h2 id="大驼峰命名">大驼峰命名</h2>
<pre><code class="language-php">class ProductItem
</code></pre>
<h2 id="所有大写字母用下划线分隔">所有大写字母用下划线分隔</h2>
<pre><code class="language-php">const ACCESS_KEY = '123abc';
</code></pre>
<h1 id="输出-输入">输出 &amp; 输入</h1>
<h2 id="输出">输出</h2>
<pre><code class="language-php">echo 'Hello World';
</code></pre>
<h2 id="调式输出">调式输出</h2>
<pre><code class="language-php">var_dump($names);
print_r($products);
</code></pre>
<h2 id="从控制台输入">从控制台输入</h2>
<pre><code class="language-php">$name = readline('What is your name : ');
</code></pre>
<h1 id="变量声明">变量声明</h1>
<h2 id="字符串">字符串</h2>
<pre><code class="language-php">$name = 'Mike';
</code></pre>
<h2 id="布尔型">布尔型</h2>
<pre><code class="language-php">$isActive = true;
</code></pre>
<h2 id="整型">整型</h2>
<pre><code class="language-php">$number = 25;
</code></pre>
<h2 id="浮点型">浮点型</h2>
<pre><code class="language-php">$amount = 99.95;
</code></pre>
<h2 id="数组">数组</h2>
<pre><code class="language-php">$fruits = ['orange', 'apple', 'banana'];
</code></pre>
<h2 id="常量">常量</h2>
<pre><code class="language-php">const MAX_USERS = 50;

define('MAX_USERS', 50);
</code></pre>
<h2 id="赋值-引用-是通过-关键字">赋值 '引用' 是通过 &amp; 关键字</h2>
<pre><code class="language-php">$name_2 = &amp;$name_1;
</code></pre>
<h2 id="类型转换">类型转换</h2>
<pre><code class="language-php">$age = (int)readline('Your age: ');

echo 'Your age is' . (string)$age;
</code></pre>
<h2 id="获取变量类型">获取变量类型</h2>
<pre><code class="language-php">echo gettype($age); // int
</code></pre>
<h2 id="判断是否整形">判断是否整形</h2>
<pre><code class="language-php">echo is_int($age)
</code></pre>
<h2 id="判断是否浮点型">判断是否浮点型</h2>
<pre><code class="language-php">echo is_float($age)
</code></pre>
<h2 id="判断是否字符串">判断是否字符串</h2>
<pre><code class="language-php">echo is_string($age)
</code></pre>
<h1 id="字符串-2">字符串</h1>
<h2 id="单引号">单引号</h2>
<pre><code class="language-php">$name = 'Mike';
</code></pre>
<h2 id="双引号">双引号</h2>
<pre><code class="language-php">$name = &quot;Mike&quot;;
</code></pre>
<h2 id="双引号字符串能够使用转义字符-n-new-line-t-tab-backslash">双引号字符串能够使用转义字符 \n = new line  \t = tab  \ = backslash</h2>
<pre><code class="language-php">echo &quot;Hello Mike\nHello David&quot;;
</code></pre>
<h2 id="双引号字符串能够插入变量">双引号字符串能够插入变量</h2>
<pre><code class="language-php">echo &quot;Hello $name&quot;;
</code></pre>
<h2 id="字符串拼接">字符串拼接</h2>
<pre><code class="language-php">echo 'Hello ' . $name;
</code></pre>
<h2 id="字符串长度">字符串长度</h2>
<pre><code class="language-php">echo strlen($name);
</code></pre>
<h2 id="删除首部和尾部的空格">删除首部和尾部的空格</h2>
<pre><code class="language-php">echo trim($text);
</code></pre>
<h2 id="转换为小写">转换为小写</h2>
<pre><code class="language-php">echo strtolower($email);
</code></pre>
<h2 id="转换为大写">转换为大写</h2>
<pre><code class="language-php">echo strtoupper($email);
</code></pre>
<h2 id="将首字符转换为大写">将首字符转换为大写</h2>
<pre><code class="language-php">echo ucfirst($name);  // 'Mike' 
</code></pre>
<h2 id="替换-将-text-中的文本-a-替换成文本-b">替换 将 $text 中的文本 a 替换成文本 b</h2>
<pre><code class="language-php">echo str_replace('a', 'b', $text);
</code></pre>
<h2 id="字符串包含-php-8">字符串包含 (PHP 8)</h2>
<pre><code class="language-php">echo str_contains($name, 'ke')  # true
</code></pre>
<h2 id="查找-k-在字符串中第一次出现的位置">查找 &quot;k&quot; 在字符串中第一次出现的位置</h2>
<pre><code class="language-php">$pos = strpos($name, 'k');
</code></pre>
<h2 id="返回字符串的一部分-偏移量-长度">返回字符串的一部分 (偏移量 / 长度)</h2>
<pre><code class="language-php">echo substr($name, 0, $pos); # Mi
</code></pre>
<h1 id="数字">数字</h1>
<h2 id="快捷增加并赋值">快捷增加并赋值</h2>
<pre><code class="language-php">$value = 10;
$value++;
// or 
$value += 1;
</code></pre>
<h2 id="快捷减少并赋值">快捷减少并赋值</h2>
<pre><code class="language-php">$value = 10;
$value--;
// or 
$value -= 1;
</code></pre>
<h2 id="检查是否是数字">检查是否是数字</h2>
<pre><code class="language-php">echo is_numeric('59.99'); # true
</code></pre>
<h2 id="四舍五入">四舍五入</h2>
<pre><code class="language-php">echo round(0.80);  // returns 1
</code></pre>
<h2 id="精确地对数字进行四舍五入">精确地对数字进行四舍五入</h2>
<pre><code class="language-php">echo round(1.49356, 2));  // returns 1.49
</code></pre>
<h2 id="随机数">随机数</h2>
<pre><code class="language-php">echo(rand(10, 100)); # 89
</code></pre>
<h1 id="条件语句">条件语句</h1>
<h2 id="if-elseif-else">If / elseif / else</h2>
<pre><code class="language-php">if ($condition == 10) {
    echo 'condition 10'
} elseif  ($condition == 5) {
    echo 'condition 5'
} else {
    echo 'all other conditions'
}
</code></pre>
<h2 id="and-等于">And 等于 &amp;&amp;</h2>
<pre><code class="language-php">if ($condition === 10 &amp;&amp; $condition2 === 5) {
    echo '10 and 5'
}
</code></pre>
<h2 id="or-等于">Or 等于 ||</h2>
<pre><code class="language-php">if ($condition === 10 || $condition2 === 5) {
    echo '10 or 5'
}
</code></pre>
<h2 id="单行">单行</h2>
<pre><code class="language-php">if ($isActive) return true;
</code></pre>
<h2 id="检查-null-值">检查 null 值</h2>
<pre><code class="language-php">if (is_null($name)) {
    
}
</code></pre>
<h2 id="比较操作符">比较操作符</h2>
<pre><code class="language-php">== // 松散比较
=== // 严格比较
!= // 不等于
|| // 或
&amp;&amp; // 且
&gt; // 大于
&lt; // 小于
</code></pre>
<h2 id="三元运算-true-false">三元运算 (true : false)</h2>
<pre><code class="language-php">echo $isValid ? 'user valid' : 'user not valid';
</code></pre>
<h2 id="null-合并运算">null 合并运算</h2>
<pre><code class="language-php">echo $name ?? 'Mike';  //output 'Mike' if $name is null
</code></pre>
<h2 id="null-合并赋值">null 合并赋值</h2>
<pre><code class="language-php">$name ??= 'Mike';
</code></pre>
<h2 id="null-安全运算符php-8如果有一个为-null将返回-null">null 安全运算符（PHP 8）如果有一个？为 null，将返回 null</h2>
<pre><code class="language-php">echo $user?-&gt;profile?-&gt;activate();
</code></pre>
<h2 id="null-安全-null-合并-如果为-null-将返回-no-user-profile">null 安全 + null 合并 (如果为 null 将返回 『No user profile』)</h2>
<pre><code class="language-php">echo $user?-&gt;profile?-&gt;activate() ?? 'Not applicable';
</code></pre>
<h2 id="飞船符号-返回-1-0-1">飞船符号 返回 -1 0 1</h2>
<pre><code class="language-php">$names = ['Mike', 'Paul', 'John']
usort($names, function($a, $b) {
    return $a &lt;=&gt; $b;
}
// ['John', 'Mike', 'Paul']
</code></pre>
<h2 id="转换为布尔值时返回-false">转换为布尔值时返回 false</h2>
<pre><code class="language-php">false, 0, 0.0, null, unset, '0', '', []
</code></pre>
<h2 id="将同一变量与多个值进行比较">将同一变量与多个值进行比较</h2>
<pre><code class="language-php">switch ($color) {
    case 'red':
        echo 'The color is red';
         break;
    case 'yellow':
        echo 'The color is yellow';
        break;
    case 'red':
        echo 'The color is red';
        break;
    default:
        echo 'The color is unknown';
}
</code></pre>
<h2 id="match-表达式php-8">Match 表达式（PHP 8）</h2>
<pre><code class="language-php">$type = match($color) {
    'red' =&gt; 'danger',
    'yellow', 'orange' =&gt; 'warning',
    'green' =&gt; 'success',
    default =&gt; 'Unknown'
};
</code></pre>
<h2 id="检查变量是否声明">检查变量是否声明</h2>
<pre><code class="language-php">isset($color['red']);  # true
</code></pre>
<h1 id="循环和迭代">循环和迭代</h1>
<h2 id="for-循环">for 循环</h2>
<pre><code class="language-php">for ($i = 0; $i &lt; 20; $i++) {
    echo &quot;i value = &quot; . i;
}
</code></pre>
<h2 id="while-循环">while 循环</h2>
<pre><code class="language-php">$number = 1;
while ($number &lt; 10) {
    echo 'value : ' . $number ;
    $number += 1;
}
</code></pre>
<h2 id="do-while">do while</h2>
<pre><code class="language-php">$number = 1;
do {
    echo 'value : ' . $number ;
    $number += 1;
} while ($number &lt; 10);
</code></pre>
<h2 id="foreach-带有-break-continue-的示例">foreach 带有 break / continue 的示例</h2>
<pre><code class="language-php">$values = ['one', 'two', 'three'];
foreach ($values as $value) {
    if ($value === 'two') {
        break; // 退出循环
    } elseif ($value === 'three') {
        continue; // 下一个循环迭代
    }
}
</code></pre>
<h1 id="数组-2">数组</h1>
<h2 id="数组声明可以包含任何类型">数组声明可以包含任何类型</h2>
<pre><code class="language-php">$example = ['Mike', 50.2, true, ['10', '20'];
</code></pre>
<h2 id="数组声明">数组声明</h2>
<pre><code class="language-php">$names = ['Mike', 'Peter', 'Shawn', 'John'];
</code></pre>
<h2 id="直接访问特定元素">直接访问特定元素</h2>
<pre><code class="language-php">$name[1]
</code></pre>
<h2 id="如何访问数组中的数组元素">如何访问数组中的数组元素</h2>
<pre><code class="language-php">$example[3][1]
</code></pre>
<h2 id="将元素添加到数组">将元素添加到数组</h2>
<pre><code class="language-php">$names[] = 'Micheal';
</code></pre>
<h2 id="数组合并">数组合并</h2>
<pre><code class="language-php">$array3 = array_merge($array1, $array2);
</code></pre>
<h2 id="使用扩展运算符来进行数组合并">使用扩展运算符来进行数组合并</h2>
<pre><code class="language-php">$names = ['Mike', 'Peter', 'Paul'];
$people = ['John', ...$names]; // ['John', 'Mike', 'Peter', 'Paul']
</code></pre>
<h2 id="删除数组元素">删除数组元素</h2>
<pre><code class="language-php">unset($names['Peter']);
</code></pre>
<h2 id="数组转字符串">数组转字符串</h2>
<pre><code class="language-php">echo implode(', ', $names); // 输出 Mike, Shawn, John, Micheal
</code></pre>
<h2 id="字符串转数组">字符串转数组</h2>
<pre><code class="language-php">echo explode(',', $text); // ['Mike', 'Shawn', 'John']
</code></pre>
<h2 id="遍历数组元素">遍历数组元素</h2>
<pre><code class="language-php">foreach($names as $name) { 
   echo 'Hello ' . $name;
}
</code></pre>
<h2 id="数组中元素的个数">数组中元素的个数</h2>
<pre><code class="language-php">echo count($names);
</code></pre>
<h2 id="关联数组声明-key-value">关联数组声明 (key =&gt; value):</h2>
<pre><code class="language-php">$person = ['age' =&gt; 45, 'genre' =&gt; 'men'];
</code></pre>
<h2 id="添加到末尾-数组">添加到末尾. 数组:</h2>
<pre><code class="language-php">$person['name'] = 'Mike';
</code></pre>
<h2 id="循环数组-key-value">循环数组 key =&gt; value:</h2>
<pre><code class="language-php">foreach($names as $key =&gt; $value) { 
   echo $key . ' : ' . $value
}
</code></pre>
<h2 id="检查是否存在某个特定键">检查是否存在某个特定键</h2>
<pre><code class="language-php">echo array_key_exists('age', $person);
</code></pre>
<h2 id="返回键">返回键</h2>
<pre><code class="language-php">echo array_keys($person); // ['age', 'genre']
</code></pre>
<h2 id="返回值">返回值</h2>
<pre><code class="language-php">echo array_values($person) // [45, 'men']
</code></pre>
<h2 id="数组过滤器-返回过滤后的数组">数组过滤器 (返回过滤后的数组)</h2>
<pre><code class="language-php">$filteredPeople = array_filter($people, function ($person) {
    return $names-&gt;active;
})
</code></pre>
<h2 id="数组映射-返回变换后的数组">数组映射 (返回变换后的数组)</h2>
<pre><code class="language-php">$onlyNames = array_map(function($person) {
    return ['name' =&gt; $person-&gt;name];
}, $people)
</code></pre>
<h2 id="搜索关联数组">搜索关联数组</h2>
<pre><code class="language-php">$items = [
        ['id' =&gt; '100', 'name' =&gt; 'product 1'],
        ['id' =&gt; '200', 'name' =&gt; 'product 2'],
        ['id' =&gt; '300', 'name' =&gt; 'product 3'],
        ['id' =&gt; '400', 'name' =&gt; 'product 4'],
    ];
</code></pre>
<h2 id="在-name-列中搜索所有值">在 'name' 列中搜索所有值</h2>
<pre><code class="language-php">$found_key = array_search('product 3', array_column($items, 'name'));
</code></pre>
<h1 id="函数">函数</h1>
<h2 id="函数声明">函数声明</h2>
<pre><code class="language-php">function name($firstName, $lastName = 'defaultvalue') {
    return &quot;$firstName $lastName&quot;
}
</code></pre>
<h2 id="函数调用">函数调用</h2>
<pre><code class="language-php">name('Mike', 'Taylor');
</code></pre>
<h2 id="带命名参数的函数调用-php-8">带命名参数的函数调用 (PHP 8)</h2>
<pre><code class="language-php">name(firstName: 'Mike', lastName: 'Taylor'); // 排序能够改变
</code></pre>
<h2 id="函数可变数量参数">函数可变数量参数</h2>
<pre><code class="language-php">function name(...$params) {
    return $params[0] . “ “ . params[1];
}
</code></pre>
<h2 id="闭包函数">闭包函数</h2>
<pre><code class="language-php">Route::get('/', function () {
     return view('welcome');
});
</code></pre>
<h2 id="箭头函数">箭头函数</h2>
<pre><code class="language-php">Route::get('/', fn () =&gt; view('welcome');
</code></pre>
<h2 id="参数类型和返回类型">参数类型和返回类型</h2>
<pre><code class="language-php">function display(string $first, string $last) : string {
    return &quot;$first $last&quot;;
}
</code></pre>
<h2 id="类型或空值">类型或空值</h2>
<pre><code class="language-php">function display(?string $name) {
   
}
</code></pre>
<h1 id="文件">文件</h1>
<h2 id="获取当前目录">获取当前目录</h2>
<pre><code class="language-php">$current_dir = __DIR__;
</code></pre>
<h2 id="检查文件是否存在">检查文件是否存在</h2>
<pre><code class="language-php">if (file_exists('/posts/first.txt')) {
 
}
</code></pre>
<h2 id="读取文件内容到一个变量中">读取文件内容到一个变量中</h2>
<pre><code class="language-php">$post = file_get_contents($file);
</code></pre>
<h2 id="文件读取">文件读取</h2>
<pre><code class="language-php">$file = fopen(&quot;test.txt&quot;, &quot;r&quot;);
</code></pre>
<h2 id="输出行-直到-eof-结束">输出行, 直到 EOF 结束</h2>
<pre><code class="language-php">while(! feof($file)) {
  $line = fgets($file);
  echo $line. &quot;&lt;br&gt;&quot;;
}
fclose($file);
</code></pre>
<h2 id="文件写入">文件写入</h2>
<pre><code class="language-php">$file = fopen('export.csv', 'a');
$array = ['name' =&gt; 'Mike', 'age' =&gt; 45];
</code></pre>
<h2 id="将键名写为-csv-标题">将键名写为 CSV 标题</h2>
<pre><code class="language-php">fputcsv($file, array_keys($array[0]));
</code></pre>
<h2 id="写入行-格式为-csv">写入行 (格式为 csv)</h2>
<pre><code class="language-php">foreach ($array as $row) {
    fputcsv($file, $row); 
}
fclose($file);
</code></pre>
<h1 id="errors">Errors</h1>
<h2 id="抛出错误">抛出错误</h2>
<pre><code class="language-php">if (someCondition) {
    throw new Exception('Data format error');
}
</code></pre>
<h2 id="捕获错误">捕获错误</h2>
<pre><code class="language-php">try {
  $db-&gt;checkData($data);
} catch (Exception $e) {
    echo $e-&gt;getMessage();
}
</code></pre>
<pre><code class="language-php">// 如果try catch都有return，按照正常执行，然后执行finally的逻辑，再返回对应的try 或者catch里执行return
// 如果try catch finally都有return，执行完finally的逻辑后，会调用finally的return
try {
  $db-&gt;checkData($data);
} catch (Exception $e) {
    echo $e-&gt;getMessage();
} finally {

}
</code></pre>
<h1 id="oop">OOP</h1>
<h2 id="类声明">类声明</h2>
<pre><code class="language-php">class Person 
{
}
</code></pre>
<h2 id="对象实例">对象实例</h2>
<pre><code class="language-php">$person = new Person
</code></pre>
<h2 id="类属性和构造方法">类属性和构造方法</h2>
<pre><code class="language-php">class Person 
{
   protected $firstName;
   protected $lastName;
   public function __construct($firstName, $lastName) {
        $this-&gt;firstName = $firstName;
        $this-&gt;lastName = $lastName
   }
}
</code></pre>
<h2 id="构造器属性提升php-8">构造器属性提升（PHP 8）</h2>
<pre><code class="language-php">class Person 
{
    public function __construct(protected $firstName, protected $lastName) 
    {

    }
}
</code></pre>
<h2 id="获取和设置">获取和设置</h2>
<pre><code class="language-php">class Person
{
    private $name;

    public function setName($name){
        if(!is_string($name)){
            throw new Exception('$name must be a string!');
        }
        $this-&gt;name = $name;
    }

    public function getName(){
        return $this-&gt;name;
    }
}
</code></pre>
<h2 id="静态构造方法">静态构造方法</h2>
<pre><code class="language-php">public static function create(...$params) {
    return new self($params)
}
$person = Person::create(‘Mike’, ‘Taylor’);
</code></pre>
<h2 id="静态方法">静态方法</h2>
<pre><code class="language-php">class greeting {
  public static function welcome() {
    echo &quot;Hello World!&quot;;
  }
}
</code></pre>
<h2 id="调用静态方法">调用静态方法</h2>
<pre><code class="language-php">greeting::welcome();
</code></pre>
<h2 id="静态方法调用">静态方法调用</h2>
<pre><code class="language-php">class greeting {
  public static function welcome() {
    echo &quot;Hello World!&quot;;
  }

  public function __construct() {
    static::welcome();
  }
}
new greeting();
</code></pre>
<h2 id="静态常量">静态常量</h2>
<pre><code class="language-php">class Connection
{
  const MAX_USER = 100;
}
echo Connection::MAX_USER # 100
</code></pre>
<h2 id="类继承">类继承</h2>
<pre><code class="language-php">class Customer extends Person
{
    public function name()
    {
        parent::name();
        echo 'Override method';  
    }
}
</code></pre>
<h2 id="self-关键字引用当前类不会像静态那样通过继承后期绑定修改">self 关键字引用当前类（不会像静态那样通过继承后期绑定修改）</h2>
<pre><code class="language-php">self::welcome();
</code></pre>
<h2 id="接口">接口</h2>
<pre><code class="language-php">interface Animal {
  public function makeSound();
}

class Cat implements Animal {
  public function makeSound() {
    echo &quot;Meow&quot;;
  }
}
$animal = new Cat();
$animal-&gt;makeSound();
</code></pre>
<h2 id="trait-mix-in">Trait (mix-in)</h2>
<pre><code class="language-php">trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}
class Greetings {
    use HelloWorld;
}
$object = new Greetings();
$object-&gt;sayHello();
</code></pre>
<blockquote>
<p>https://learnku.com/php/t/62217</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go 操作MySQL]]></title>
        <id>http://weakcc.github.io/post/go-cao-zuo-mysql/</id>
        <link href="http://weakcc.github.io/post/go-cao-zuo-mysql/">
        </link>
        <updated>2021-11-03T08:44:38.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="下载依赖">下载依赖</h2>
<pre><code class="language-go">go get -u github.com/go-sql-driver/mysql
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h2 id="下载依赖">下载依赖</h2>
<pre><code class="language-go">go get -u github.com/go-sql-driver/mysql
</code></pre>
<!-- more -->
<h2 id="连接">连接</h2>
<pre><code class="language-go">package main

import (
	&quot;database/sql&quot;
	&quot;fmt&quot;

	_ &quot;github.com/go-sql-driver/mysql&quot;
)

var db *sql.DB

func initDB() (err error) {
	// 用户名:密码@tcp(ip:端口)/数据库名
	dsn := &quot;root:123456@tcp(127.0.0.1:3306)/go_test&quot;
	// Open 不会校验账号密码是否正确
	db, err = sql.Open(&quot;mysql&quot;, dsn)
	if err != nil {
		return
	}
	// 尝试与数据库建立连接（校验dsn是否正确）
	err = db.Ping()
	if err != nil {
		return
    }
	return nil
}

func main()  {
	err:= initDB()
	if err!= nil {
		fmt.Println(err)
		return
	}
	fmt.Println(&quot;连接成功！&quot;)
}
</code></pre>
<blockquote>
<p>其中 <code>sql.DB</code> 是表示连接的数据库对象（结构体实例），它保存了连接数据库相关的所有信息。它内部维护着一个具有零到多个底层连接的连接池，它可以安全地被多个 goroutine 同时使用</p>
</blockquote>
<h2 id="curd">CURD</h2>
<h3 id="插入">插入</h3>
<pre><code class="language-go">func insertRow()  {
	sqlStr := &quot;insert into user (name, age) values (?, ?)&quot;
	result, err := db.Exec(sqlStr, &quot;小晓&quot;, 11)
	if err != nil {
		fmt.Println(err)
		return
	}
	id, err := result.LastInsertId()
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(id)
}
</code></pre>
<h3 id="查询">查询</h3>
<h4 id="单行查询">单行查询</h4>
<pre><code class="language-go">func queryRow()  {
	sqlStr := &quot;select id, name, age from user where id = ?&quot;
    var u user
    // 确保 QueryRow 之后调用 Scan 方法，否则持有的数据库链接不会被释放
	err := db.QueryRow(sqlStr, 1).Scan(&amp;u.id, &amp;u.name, &amp;u.age)
	if err != nil {
		fmt.Println(&quot;错误：&quot;, err)
		return
	}
	fmt.Println(u)
}
</code></pre>
<h4 id="多行查询">多行查询</h4>
<pre><code class="language-go">func queryRows()  {
	sqlStr := &quot;select id, name, age from user where id &gt;= ?&quot;
	rows, err := db.Query(sqlStr, 1)
	if err != nil {
		fmt.Println(err)
	}
	// 关闭 rows 释放持有的数据库链接
	defer rows.Close()

	// 循环读取结果集中的数据
	for rows.Next() {
		var u user
		err := rows.Scan(&amp;u.id, &amp;u.name, &amp;u.age)
		if err != nil {
			fmt.Println(&quot;错误：&quot;, err)
			return
		}
		fmt.Println(u)
	}
}
</code></pre>
<h3 id="更新">更新</h3>
<pre><code class="language-go">func updateRow()  {
	sqlStr := &quot;update user set age = ? where id &gt; ?&quot;
	result, err := db.Exec(sqlStr, 12, 2)
	if err != nil {
		fmt.Println(err)
		return
	}
	n, err := result.RowsAffected() // 操作受影响的行数
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(n)
}
</code></pre>
<h3 id="删除数据">删除数据</h3>
<pre><code class="language-go">func deleteRow()  {
	sqlStr := &quot;delete from user where id = ?&quot;
	result, err := db.Exec(sqlStr, 4)
	if err != nil {
		fmt.Println(err)
		return
	}
	n, err := result.RowsAffected()
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(n)
}
</code></pre>
<h2 id="预处理">预处理</h2>
<p>防止 <code>SQL 注入</code></p>
<h3 id="查询-2">查询</h3>
<pre><code class="language-go">func prepareQuery()  {
	sqlStr := &quot;select id, name, age from user where id &gt;= ?&quot;
	stmt, err := db.Prepare(sqlStr)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer stmt.Close()
	rows, err := stmt.Query(1)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer rows.Close()
	for rows.Next() {
		var u user
		err := rows.Scan(&amp;u.id, &amp;u.name, &amp;u.age)
		if err != nil {
			fmt.Println(err)
			return
		}
		fmt.Println(u)
	}
}
</code></pre>
<h3 id="插入更新删除类似">插入，更新，删除类似</h3>
<pre><code class="language-go">func prepareInsert() {
	sqlStr := &quot;insert into user(name, age) values (?, ?)&quot;
	stmt, err := db.Prepare(sqlStr)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer stmt.Close()
	_, err = stmt.Exec(&quot;小爱&quot;, 5)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(&quot;success&quot;)
}
</code></pre>
<h2 id="事务">事务</h2>
<pre><code class="language-go">func transactionDemo()  {
	tx, err := db.Begin() // 开启事务
	if err != nil {
		if tx != nil {
			tx.Rollback() // 回滚
		}
		fmt.Println(err)
		return
	}
	sqlStr1 := &quot;update user set age = 18 where id = ?&quot;
	result1, err := tx.Exec(sqlStr1, 2)
	if err != nil {
		tx.Rollback()
		fmt.Println(err)
		return
	}
	n1, err := result1.RowsAffected()
	if err != nil {
		tx.Rollback()
		fmt.Println(err)
		return
	}
	sqlStr2 := &quot;update user set age = 18 where id = ?&quot;
	result2, err := tx.Exec(sqlStr2, 1)
	if err != nil {
		tx.Rollback()
		fmt.Println(err)
		return
	}
	n2, err := result2.RowsAffected()
	if err != nil {
		tx.Rollback()
		fmt.Println(err)
		return
	}
	fmt.Println(n1, n2)
	if 1 == n1 &amp;&amp; 1 == n2 {
		tx.Commit() // 提交
	} else {
		tx.Rollback()
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP 随机字符串]]></title>
        <id>http://weakcc.github.io/post/php-sui-ji-zi-fu-chuan/</id>
        <link href="http://weakcc.github.io/post/php-sui-ji-zi-fu-chuan/">
        </link>
        <updated>2021-11-01T06:12:51.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-php">function getRandChar($length = 6)
{
    $charStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';

    $str = '';
    $max = strlen($charStr);
    for ($i = 0; $i &lt; $length; $i++) {
        $str .= $charStr[rand(0, $max - 1)];
    }

    return $str;
}

var_dump(getRandChar(5));
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP 无限极分类]]></title>
        <id>http://weakcc.github.io/post/php-wu-xian-ji-fen-lei/</id>
        <link href="http://weakcc.github.io/post/php-wu-xian-ji-fen-lei/">
        </link>
        <updated>2021-11-01T06:10:47.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="递归">递归</h1>
<pre><code class="language-php">&lt;?php

$array = [
    ['id' =&gt; 1, 'parent_id' =&gt; 0, 'name' =&gt; '河北省'],
    ['id' =&gt; 2, 'parent_id' =&gt; 0, 'name' =&gt; '北京市'],
    ['id' =&gt; 3, 'parent_id' =&gt; 1, 'name' =&gt; '邯郸市'],
    ['id' =&gt; 4, 'parent_id' =&gt; 2, 'name' =&gt; '朝阳区'],
    ['id' =&gt; 5, 'parent_id' =&gt; 2, 'name' =&gt; '通州区'],
    ['id' =&gt; 6, 'parent_id' =&gt; 4, 'name' =&gt; '望京'],
    ['id' =&gt; 7, 'parent_id' =&gt; 4, 'name' =&gt; '酒仙桥'],
    ['id' =&gt; 8, 'parent_id' =&gt; 3, 'name' =&gt; '永年区'],
    ['id' =&gt; 9, 'parent_id' =&gt; 1, 'name' =&gt; '武安市'],
];

function getTree($array, $parent_id = 0, $level = 0)
{
    static $list = [];
    foreach ($array as $key =&gt; $value) {
        if ($value['parent_id'] == $parent_id) {
            $value['level'] = $level;
            $list[] = $value;
            unset($array[$key]);
            getTree($array, $value['id'], $level + 1);
        }
    }
    return $list;
}

$list = getTree($array);

foreach ($list as $value) {
    echo str_repeat('--', $value['level']) . $value['name'] . PHP_EOL;
}
/**
河北省
--邯郸市
----永年区
--武安市
北京市
--朝阳区
----望京
----酒仙桥
--通州区
 **/
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h1 id="递归">递归</h1>
<pre><code class="language-php">&lt;?php

$array = [
    ['id' =&gt; 1, 'parent_id' =&gt; 0, 'name' =&gt; '河北省'],
    ['id' =&gt; 2, 'parent_id' =&gt; 0, 'name' =&gt; '北京市'],
    ['id' =&gt; 3, 'parent_id' =&gt; 1, 'name' =&gt; '邯郸市'],
    ['id' =&gt; 4, 'parent_id' =&gt; 2, 'name' =&gt; '朝阳区'],
    ['id' =&gt; 5, 'parent_id' =&gt; 2, 'name' =&gt; '通州区'],
    ['id' =&gt; 6, 'parent_id' =&gt; 4, 'name' =&gt; '望京'],
    ['id' =&gt; 7, 'parent_id' =&gt; 4, 'name' =&gt; '酒仙桥'],
    ['id' =&gt; 8, 'parent_id' =&gt; 3, 'name' =&gt; '永年区'],
    ['id' =&gt; 9, 'parent_id' =&gt; 1, 'name' =&gt; '武安市'],
];

function getTree($array, $parent_id = 0, $level = 0)
{
    static $list = [];
    foreach ($array as $key =&gt; $value) {
        if ($value['parent_id'] == $parent_id) {
            $value['level'] = $level;
            $list[] = $value;
            unset($array[$key]);
            getTree($array, $value['id'], $level + 1);
        }
    }
    return $list;
}

$list = getTree($array);

foreach ($list as $value) {
    echo str_repeat('--', $value['level']) . $value['name'] . PHP_EOL;
}
/**
河北省
--邯郸市
----永年区
--武安市
北京市
--朝阳区
----望京
----酒仙桥
--通州区
 **/
</code></pre>
<!-- more -->
<h1 id="引用">引用</h1>
<pre><code class="language-php">&lt;?php

$array = [
    1 =&gt; ['id' =&gt; 1, 'parent_id' =&gt; 0, 'name' =&gt; '河北省'],
    2 =&gt; ['id' =&gt; 2, 'parent_id' =&gt; 0, 'name' =&gt; '北京市'],
    3 =&gt; ['id' =&gt; 3, 'parent_id' =&gt; 1, 'name' =&gt; '邯郸市'],
    4 =&gt; ['id' =&gt; 4, 'parent_id' =&gt; 2, 'name' =&gt; '朝阳区'],
    5 =&gt; ['id' =&gt; 5, 'parent_id' =&gt; 2, 'name' =&gt; '通州区'],
    6 =&gt; ['id' =&gt; 6, 'parent_id' =&gt; 4, 'name' =&gt; '望京'],
    7 =&gt; ['id' =&gt; 7, 'parent_id' =&gt; 4, 'name' =&gt; '酒仙桥'],
    8 =&gt; ['id' =&gt; 8, 'parent_id' =&gt; 3, 'name' =&gt; '永年区'],
    9 =&gt; ['id' =&gt; 9, 'parent_id' =&gt; 1, 'name' =&gt; '武安市'],
];

function getTree($list)
{
    $tree = [];
    foreach ($list as &amp;$item) {
        $parent_id = $item['parent_id'];

        if (isset($list[$parent_id]) &amp;&amp; !empty($list[$parent_id])) {
            $list[$parent_id]['list'][] = &amp;$item;
        } else {
            $tree[] = &amp;$item;
        }
    }
    unset($item);

    return $tree;
}

$list = getTree($array);
print_r($list);
</code></pre>
<h1 id="laravel-orm-模型">Laravel ORM 模型</h1>
<table>
<thead>
<tr>
<th style="text-align:center">字段名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">id</td>
<td style="text-align:center">自增长 ID</td>
<td style="text-align:center">unsigned big int</td>
</tr>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">类目名称</td>
<td style="text-align:center">varchar</td>
</tr>
<tr>
<td style="text-align:center">parent_id</td>
<td style="text-align:center">父类目 ID</td>
<td style="text-align:center">unsigned big int, null</td>
</tr>
<tr>
<td style="text-align:center">is_directory</td>
<td style="text-align:center">是否拥有子类目</td>
<td style="text-align:center">tinyint</td>
</tr>
<tr>
<td style="text-align:center">level</td>
<td style="text-align:center">当前类目层级</td>
<td style="text-align:center">unsigned int</td>
</tr>
<tr>
<td style="text-align:center">path</td>
<td style="text-align:center">该类目所有父类目 id</td>
<td style="text-align:center">varchar</td>
</tr>
</tbody>
</table>
<pre><code class="language-php">&lt;?php
namespace App\Services;

use App\Models\Category;

class CategoryService
{
    // 这是一个递归方法
    // $parentId 参数代表要获取子类目的父类目 ID，null 代表获取所有根类目
    // $allCategories 参数代表数据库中所有的类目，如果是 null 代表需要从数据库中查询
    public function getCategoryTree($parentId = null, $allCategories = null)
    {
        if (is_null($allCategories)) {
            // 从数据库中一次性取出所有类目
            $allCategories = Category::all();
        }

        return $allCategories
            // 从所有类目中挑选出父类目 ID 为 $parentId 的类目
            -&gt;where('parent_id', $parentId)
            // 遍历这些类目，并用返回值构建一个新的集合
            -&gt;map(function (Category $category) use ($allCategories) {
                $data = ['id' =&gt; $category-&gt;id, 'name' =&gt; $category-&gt;name];
                // 如果当前类目不是父类目，则直接返回
                if (!$category-&gt;is_directory) {
                    return $data;
                }
                // 否则递归调用本方法，将返回值放入 children 字段中
                $data['children'] = $this-&gt;getCategoryTree($category-&gt;id, $allCategories);

                return $data;
            });
    }
}

// 调用
app(App\Services\CategoryService::class)-&gt;getCategoryTree()
</code></pre>
]]></content>
    </entry>
</feed>