<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://weakcc.github.io</id>
    <title>腰盐醋</title>
    <updated>2021-07-28T06:45:53.258Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://weakcc.github.io"/>
    <link rel="self" href="http://weakcc.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>http://weakcc.github.io/images/avatar.png</logo>
    <icon>http://weakcc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 腰盐醋</rights>
    <entry>
        <title type="html"><![CDATA[实现大数据量文件的异步导出]]></title>
        <id>http://weakcc.github.io/post/shi-xian-da-shu-ju-liang-wen-jian-de-yi-bu-dao-chu/</id>
        <link href="http://weakcc.github.io/post/shi-xian-da-shu-ju-liang-wen-jian-de-yi-bu-dao-chu/">
        </link>
        <updated>2021-07-07T09:14:59.000Z</updated>
        <summary type="html"><![CDATA[<ol>
    <li>点击导出后，将筛选条件推进队列。（包括总条数）（提示正在处理）</li>
    <li>消费队列任务，并分页获取列表数据。生成文件。（提示正在处理）</li>
    <li>将生成的文件，上传某地，并提供下载链接（提示处理完成，超链接下载）</li>
</ol>]]></summary>
        <content type="html"><![CDATA[<ol>
    <li>点击导出后，将筛选条件推进队列。（包括总条数）（提示正在处理）</li>
    <li>消费队列任务，并分页获取列表数据。生成文件。（提示正在处理）</li>
    <li>将生成的文件，上传某地，并提供下载链接（提示处理完成，超链接下载）</li>
</ol>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何防止超卖]]></title>
        <id>http://weakcc.github.io/post/ru-he-fang-zhi-chao-mai/</id>
        <link href="http://weakcc.github.io/post/ru-he-fang-zhi-chao-mai/">
        </link>
        <updated>2021-07-02T08:00:29.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="悲观锁">悲观锁</h1>
<p><code>悲观并发控制</code>（又名“<b>悲观锁</b>”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作读某行数据应用了锁，那只用当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="悲观锁">悲观锁</h1>
<p><code>悲观并发控制</code>（又名“<b>悲观锁</b>”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作读某行数据应用了锁，那只用当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。</p>
<!-- more -->
<p>悲观锁主要用于数据争用激烈的环境，以及发生并发冲突时锁保护数据的成本要低于回滚事务的成本的环境中。</p>
<p>简而言之，悲观锁主要用于保护数据的完整性。当多个事务并发执行时，某个事务对数据应用了锁，则其他事务只能等该事务执行完了，才能进行对该数据进行修改操作。</p>
<pre><code class="language-php">update goods set num = num - 1 where id = 1001 and num &gt; 0
</code></pre>
<p>假设现在商品只剩下一件了，此是数据库中 <b>num = 1</b>；<br>
但有 100 个线程同时读取到了这个 <b>num = 1</b>，所以 100 个线程都开始减库存了。<br>
但你最终会发觉， <b>其实只有一个线程减库存成功，其他 99 个线程全部失败</b>。<br>
需要注意的是，<code>FOR UPDATE</code> 生效需要同时满足两个条件才生效：</p>
<ul>
    <li>数据库的引擎为 innoDB</li>
    <li>操作位于事务块中（BEGIN/COMMIT）</li>
</ul>
<p>悲观锁采用的是「先获取锁再访问」的策略，来保障数据的安全。但是加锁策略，依赖数据库实现，会增加数据库的负担，且会增加死锁发生的几率。此外，对于不会发生变化的只读数据，加锁只会增加额外不必要的负担。在实际的实践中，对于并发很高的场景并不会使用悲观锁，因为当一个事务锁住了数据，那么其他事务都会发生阻塞，会导致大量的事务发生积压拖垮整个系统。</p>
<h1 id="乐观锁">乐观锁</h1>
<pre><code class="language-php">select version from goods where id = 1001;

update goods set num = num - 1, version = version + 1 where id = 1001 and num &gt; 0 and version = @version(上面查到的version);
</code></pre>
<p>这种方式采用了<b>版本号</b>的方式，其实也就是 <b>CAS</b> 的原理。<br>
假设此时 version = 100, num = 1;  现在有 100 个线程进入到了这里，同时他们 select 出来版本号都是 version = 100。<br>
然后直接 update 的时候，只有其中一个先 update 了，同时更新了版本号。<br>
那么其他 99 个在更新的时候，会发觉 version 并不等于上次 select 的 version，就说明 version 被其他线程修改过了，就放弃这次的 update。</p>
<h1 id="redis-消息队列">Redis 消息队列</h1>
<p>在秒杀的情况下，高频率的去读写数据库，会严重造成性能问题。<br>
所以必须借助其他服务，可以利用 redis 的单线程预减库存。<br>
比如商品有 100 件，那么我可以在 redis 中先存储一个 <code>k, v</code>。<br>
例如：每一个用户线程进来，key 值就减 1，等减到 0 的时候，全部拒绝剩下的请求。<br>
那么也就是只有 100 个线程会进入到后续操作。所以一定不会出现超卖的现象。</p>
<h1 id="redis-分布式锁">Redis 分布式锁</h1>
<pre><code class="language-php">&lt;?php
/**
 * 实现Redis分布锁
 */
 
$key        = 'test';       //要更新信息的缓存KEY
$lockKey    = 'lock:'.$key; //设置锁KEY
$lockExpire = 10;           //设置锁的有效期为10秒
 
//获取缓存信息
$result = $redis-&gt;get($key);
//判断缓存中是否有数据
if(empty($result))
{
    $status = TRUE;
    while ($status)
    {
        //设置锁值为当前时间戳 + 有效期
        $lockValue = time() + $lockExpire;
        /**
         * 创建锁
         * 试图以$lockKey为key创建一个缓存,value值为当前时间戳
         * 由于setnx()函数只有在不存在当前key的缓存时才会创建成功
         * 所以，用此函数就可以判断当前执行的操作是否已经有其他进程在执行了
         * @var [type]
         */
        $lock = $redis-&gt;setnx($lockKey, $lockValue);
        /**
         * 满足两个条件中的一个即可进行操作
         * 1、上面一步创建锁成功;
         * 2、   1）判断锁的值（时间戳）是否小于当前时间    $redis-&gt;get()
         *      2）同时给锁设置新值成功    $redis-&gt;getset()
         */
        if(!empty($lock) || ($redis-&gt;get($lockKey) &lt; time() &amp;&amp; $redis-&gt;getSet($lockKey, $lockValue) &lt; time() ))
        {
            //给锁设置生存时间
            $redis-&gt;expire($lockKey, $lockExpire);
            //******************************
            //此处执行插入、更新缓存操作...
            //******************************
 
            //以上程序走完删除锁
            //检测锁是否过期，过期锁没必要删除
            if($redis-&gt;ttl($lockKey))
                $redis-&gt;del($lockKey);
            $status = FALSE;
        }else{
            /**
             * 如果存在有效锁这里做相应处理
             *      等待当前操作完成再执行此次请求
             *      直接返回
             */
            sleep(2);//等待2秒后再尝试执行操作
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis 缓存击穿 缓存穿透 缓存雪崩]]></title>
        <id>http://weakcc.github.io/post/redis-huan-cun-ji-chuan-huan-cun-chuan-tou-huan-cun-xue-beng/</id>
        <link href="http://weakcc.github.io/post/redis-huan-cun-ji-chuan-huan-cun-chuan-tou-huan-cun-xue-beng/">
        </link>
        <updated>2021-07-02T01:28:08.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="缓存处理流程">缓存处理流程</h1>
<p>前台请求，后台先从缓存中取数据，取到直接返回结果，取不到时从数据库中取，数据库取到更新到缓存，并返回结果，数据库也没取到，那直接返回结果。<br>
<img src="http://weakcc.github.io/post-images/1625190068679.png" alt="" loading="lazy"></p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="缓存处理流程">缓存处理流程</h1>
<p>前台请求，后台先从缓存中取数据，取到直接返回结果，取不到时从数据库中取，数据库取到更新到缓存，并返回结果，数据库也没取到，那直接返回结果。<br>
<img src="http://weakcc.github.io/post-images/1625190068679.png" alt="" loading="lazy"></p>
<!-- more -->
<h1 id="缓存穿透">缓存穿透</h1>
<h2 id="定义">定义</h2>
<p><code>缓存穿透</code>是指缓存和数据库中都没有的数据，而用户不断发起请求，造成了类似攻击行为。如发起 id 为-1的数据或 id 特别大不存在的数据，这是用户可能就是攻击者，攻击会导致数据库压力过大。</p>
<h2 id="方案">方案</h2>
<ol>
    <li>接口层增加校验，如用户鉴权校验，id做基础校验，id<0的直接拦截</li>
    <li>从缓存取不到的数据，在数据库中也取不到，这时也可以将 key-value 对写为 key-null，缓存有效时间可以设置短点，如30s（设置时间太长会导致正常情况也没办法使用）。这样可以防止攻击用户反复用同一个 id 暴力攻击</li>
</ol>
<h1 id="缓存击穿">缓存击穿</h1>
<h2 id="定义-2">定义</h2>
<p><code>缓存击穿</code>是指缓存中没有但数据库中有数据（一般是缓存时间到期），大批量的请求在访问同一个 key，这个 key 失效的瞬间，请求打到了数据库，这时由于并发用户特别多，同时读缓存没读到数据，又同时又去数据库去取数据，引起数据库压力瞬间增大，造成过大压力</p>
<h2 id="方案-2">方案</h2>
<ol>
    <li>设置热点数据永不过期</li>
    <li>加互斥锁</li>
</ol>
<blockquote>
<p>互斥锁，先从缓存中读取数据，如果有数据直接返回，没有数据获取锁，锁成功，去数据库读取数据，更新缓存，然后释放锁。<br>
没有释放锁之前，其他并行进入的线程会等待100ms（时间不易设置太长），再重新去读取缓存数据，这样就防止都去数据库重复取数据</p>
</blockquote>
<h1 id="缓存雪崩">缓存雪崩</h1>
<h2 id="定义-3">定义</h2>
<p><code>缓存雪崩</code>是指缓存中数据大批量的到期，而查询数据量巨大，引起数据库压力过大甚至宕机。大批量的请求在访问大批量的 key，这些 key 同时失效，所有请求打到数据库，造成数据库无法响应</p>
<h2 id="方案-3">方案</h2>
<ol>
    <li>缓存数据的时间设置随机，防止同一时间大量数据过期现象发生</li>
    <li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中</li>
    <li>设置热点数据永不过期</li>
</ol>
<blockquote>
<p>https://zhuanlan.zhihu.com/p/359118610</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[连接池]]></title>
        <id>http://weakcc.github.io/post/lian-jie-chi/</id>
        <link href="http://weakcc.github.io/post/lian-jie-chi/">
        </link>
        <updated>2021-06-24T06:10:52.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="什么是连接池">什么是连接池</h1>
<p>在实际应用开发中，一般会有很多访问下游的需求（下游包括但不限于<b>服务</b>/<b>数据库</b>/<b>缓存</b>），在并发量很低的时候，通常不会有任何问题的，但当服务器单机<b>QPS</b>（每秒查询率）达到几百，几千，甚至上万的时候，如果每一次访问都是必须经历建立连接=》收发请求=》关闭连接=》释放资源等步骤，系统的性能必然急剧下降，严重导致系统崩溃。</p>
<p>上面简化为：</p>
<ul>
    <li>与下游建立一个连接</li>
    <li>通过这个连接，收发请求</li>
    <li>交互结束，关闭连接，释放资源</li>
</ul>]]></summary>
        <content type="html"><![CDATA[<h1 id="什么是连接池">什么是连接池</h1>
<p>在实际应用开发中，一般会有很多访问下游的需求（下游包括但不限于<b>服务</b>/<b>数据库</b>/<b>缓存</b>），在并发量很低的时候，通常不会有任何问题的，但当服务器单机<b>QPS</b>（每秒查询率）达到几百，几千，甚至上万的时候，如果每一次访问都是必须经历建立连接=》收发请求=》关闭连接=》释放资源等步骤，系统的性能必然急剧下降，严重导致系统崩溃。</p>
<p>上面简化为：</p>
<ul>
    <li>与下游建立一个连接</li>
    <li>通过这个连接，收发请求</li>
    <li>交互结束，关闭连接，释放资源</li>
</ul>
<!-- more -->
<blockquote>
<p>QPS是每秒查询率 ,是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准, 即每秒的响应请求数，也即是最大吞吐能力</p>
</blockquote>
<p>以 PHP 连接 MySQL 为例：</p>
<pre><code class="language-php">&lt;?php
$host = '127.0.0.1';
$username = 'root';
$password = '123456';
$dbname = 'demo';
// 打开一个到 MySQL 服务器的新的连接
$link = @mysqli_connect($host, $username, $password, $dbname); 
if ($link) {
    // SQL 语句
    $sql = 'select version()'; 
    // 执行 SQL 语句，并返回结果
    $result = mysqli_query($link, $sql); 
    // 从结果集中获取所有数据
    $data = mysqli_fetch_all($result); 
    print_r($data);
    // 关闭连接
    mysqli_close($link);
} else {
    echo '数据库连接失败！';
}
</code></pre>
<h1 id="为什么需要连接池">为什么需要连接池</h1>
<p>当服务单机 QPS 达到几百、几千的时候，<b>建立连接</b>和<b>销毁连接</b>就会成为瓶颈，此时该如何优化？<br>
很简单，服务启动的时候，<b>先建立好若干连接</b>形成一个<code>池子</code>，当有请求过来的时候，从建立好的<code>池子</code>中取出一个连接，执行下游操作，执行完毕再放回到<code>池子</code>中，以此提升性能。</p>
<h2 id="定义">定义：</h2>
<p><code>连接池</code>：创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。</p>
<h2 id="运行机制">运行机制：</h2>
<ol>
    <li><b>init</b> 程序初始化时创建连接池：初始化的时候创建，在服务启动的时候只调用一次</li>
    <li><b>get</b> 使用时向连接池申请可用连接：每次请求通过连接池的接口拿取数据</li>
    <li><b>push</b> 使用完毕，将连接返还给连接池：访问结束，并不是关闭这个连接，而是把这个连接放回到连接池中</li>
    <li>程序退出时，断开所有连接，并释放资源</li>
</ol>
<h2 id="伪代码">伪代码</h2>
<pre><code class="language-php">&lt;?php

class Pool
{
    public static function getIn()
    {
        // 单例模式
    }

    public function init()
    {
        // pool 准备好就填充指定的资源 比如10个连接
        $this-&gt;pool = $array;
    }

    public function get()
    {
        return array_pop($this-&gt;pool);
    }

    public function push($obj)
    {
        $this-&gt;pool[] = $obj;
    }
}

// 实例化池子
$dbPool = Pool::getIn();

// 获取连接
$db = $db-&gt;get();

// 执行语句
$res = $db-&gt;query('SQL 语句');

// 归还连接
$dbPool-&gt;push($db);
</code></pre>
<h2 id="数据库连接池">数据库连接池</h2>
<h3 id="定义-2">定义</h3>
<p><code>数据库连接池</code>：程序启动时建立足够的数据库连接，并将这些连接组成一个连接池，由程序动态地对池中的连接申请，使用，释放。</p>
<h3 id="优点">优点</h3>
<p>减少 <code>I/O</code> 操作，提高资源利用率<br>
如果在短时间内进行一万次mysql的连接，就需要在这个往返过程循环，在路上浪费了很多时间、性能消耗。<br>
如果我们先把连接连接好，并且放在连接池中，程序中需要使用就从池中获取，执行操作。</p>
<ol>
    <li>减少连接创建时间。连接池中的连接是已准备好的、可重复使用的，获取后可以直接访问数据库，因此减少了连接创建的次数和时间</li>
    <li>简化的编程模式。当使用连接池时，每一个单独的线程能够像创建一个自己的 JDBC 连接一样操作，允许用户直接使用 JDBC 编程技术</li>
    <li>控制资源的使用。如果不使用连接池，每次访问数据库都需要创建一个连接，这样系统的稳定性受系统连接需求影响很大，很容易产生资源浪费和高负载异常。连接池能够使性能最大化，将资源利用控制在一定的水平之下。连接池能控制池中的连接数量，增强了系统在大量用户应用时的稳定性</li>
</ol>
<blockquote>
<p>Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。我们通常说的JDBC是面向关系型数据库的。</p>
</blockquote>
<h3 id="数量如何设置">数量如何设置</h3>
<p>连接数量需要根据并发数，以及数据库的处理情况来决定的，并不是越多越好，比如你的数据库最大只能处理500个连接，那你设置700个，数据库照样处理不过来，设置过多并没有什么用处,反而可能会让数据库宕机。</p>
<blockquote>
<p>连接池数量，也就是总数，需要根据进程来看，每个进程 * 连接池配置数量 = 总数量 如 swoole 中 worker 进程为8，那你设置20个，则总数就是 8 * 20 = 160</p>
</blockquote>
<p>连接池中到底应该放置多少连接，才能使系统的性能最佳？系统可采取设置最小连接数（minConnection）和最大连接数（maxConnection）等参数来控制连接池中的连接。比方说，最小连接数是系统启动时连接池所创建的连接数。如果创建过多，则系统启动就慢，但创建后系统的响应速度会很快；如果创建过少，则系统启动的很快，响应起来却慢。这样，可以在开发时，设置较小的最小连接数，开发起来会快，而在系统实际使用时设置较大的，因为这样对访问客户来说速度会快些。最大连接数是连接池中允许连接的最大数目，具体设置多少，要看系统的访问量，可通过软件需求上得到。</p>
<p>如何确保连接池中的最小连接数呢？有动态和静态两种策略。动态即每隔一定时间就对连接池进行检测，如果发现连接数量小于最小连接数，则补充相应数量的新连接，以保证连接池的正常运转。静态是发现空闲连接不够时再去检查。</p>
<h3 id="为何要使用">为何要使用</h3>
<ul>
    <li>假设网站一天有很大的访问量，数据库服务器就需要为每次连接创建一次数据库连接，极大的浪费数据库的资源，并且极易造成数据库服务器内存溢出、宕机</li>
    <li>数据库连接是一种关键的有限的昂贵的资源，这一点在多用户的网页应用程序中体现的尤为突出。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。数据库连接池正式针对这个问题提出来的。数据库连接池负责分配，管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</li>
    <li>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中</li>
</ul>
<h3 id="并发问题">并发问题</h3>
<p>为了使连接管理服务具有最大的通用性，必须考虑多线程环境，即并发问题。这个问题相对比较好解决，因为各个语言自身提供了对并发管理的支持像 java,c# 等等，使用 synchronized (java) lock (C#) 关键字即可确保线程是同步的。</p>
<h3 id="事务处理">事务处理</h3>
<ul>
    <li>DB 连接池必须要确保某一时间内一个 conn 只能分配给一个线程。不同 conn 的事务是相互独立的</li>
    <li>事务具有原子性，此时要求对数据库的操作符合 “ALL-ALL-NOTHING” 原则，即对于一组 SQL 语句要么全做，要么全不做</li>
    <li>我们知道当２个线程共用一个连接 Connection 对象，而且各自都有自己的事务要处理时候，对于连接池是一个很头疼的问题，因为即使 Connection 类提供了相应的事务支持，可是我们仍然不能确定那个数据库操作是对应那个事务的，这是由于我们有２个线程都在进行事务操作而引起的。为此我们可以使用每一个事务独占一个连接来实现，虽然这种方法有点浪费连接池资源但是可以大大降低事务管理的复杂性</li>
</ul>
<h3 id="工作原理">工作原理</h3>
<p>连接池的工作原理主要由三部分组成，分别为连接池的建立、连接池中连接的使用管理、连接池的关闭。</p>
<ul>
    <li>第一、连接池的建立。一般在系统初始化时，连接池会根据系统配置建立，并在池中创建了几个连接对象，以便使用时能从连接池中获取。连接池中的连接不能随意创建和关闭，这样避免了连接随意建立和关闭造成的系统开销。Java 中提供了很多容器类可以方便的构建连接池，例如 Vector、Stack 等</li>
    <li>第二、连接池的管理。连接池管理策略是连接池机制的核心，连接池内连接的分配和释放对系统的性能有很大的影响。其管理策略是：
     <ul>
        <li>当客户请求数据库连接时，首先查看连接池中是否有空闲连接，如果存在空闲连接，则将连接分配给客户使用；如果没有空闲连接，则查看当前所开的连接数是否已经达到最大连接数，如果没达到就重新创建一个连接给请求的客户；如果达到就按设定的最大等待时间进行等待，如果超出最大等待时间，则抛出异常给客户</li>
        <li>当客户释放数据库连接时，先判断该连接的引用次数是否超过了规定值，如果超过就从连接池中删除该连接，否则保留为其他客户服务</li>
        <li>该策略保证了数据库连接的有效复用，避免频繁的建立、释放连接所带来的系统资源开销</li>
    </ul>
    </li>
    <li>第三、连接池的关闭。当应用程序退出时，关闭连接池中所有的连接，释放连接池相关的资源，该过程正好与创建相反</li>
</ul>
<h3 id="使用-swoole-实现简单的-redis连接池">使用 Swoole 实现简单的 Redis连接池</h3>
<pre><code class="language-php">&lt;?php
use http\Exception\RuntimeException;
class Pool
{
    protected static $instance;

    public static function i() :self
    {
        return static::$instance ?? (static::$instance = new static);
    }

    protected $channel;

    public function __construct(int $size = 10)
    {
        $this-&gt;channel = new Swoole\Coroutine\Channel($size);

        while ($size--) {
            // 协程 Redis 客户端
            $redis = new Swoole\Coroutine\Redis;
            $res = $redis-&gt;connect('127.0.0.1', 6379);
            if ($res) {
                // pull
                $this-&gt;put($redis);
            } else {
                // 抛入异常或者做错误处理或者重试
                throw new RuntimeException($res-&gt;errMsg, $res-&gt;errCode);
            }
        }
    }

    // 入列
    public function put(Swoole\Coroutine\Redis $redis): void
    {
        $this-&gt;channel-&gt;push($redis);
    }

    // 出列
    public function get($timeout = -1): ?Swoole\Coroutine\Redis
    {
        return $this-&gt;channel-&gt;pop($timeout) ?: null;
    }

    // 关闭
    public function close(): void
    {
        $this-&gt;channel-&gt;close();
    }
}

// 使用了 Co\run() 来创建一个协程容器
Co\run(function() {
    $pool = Pool::i();
    $redis = $pool-&gt;get();
//    $redis-&gt;set('foo', '小熊');
    $value = $redis-&gt;get('foo');
    if ($value === false) {
        throw new RuntimeException($redis-&gt;errMsg, $redis-&gt;errCode);
    }
    echo $value;
    $pool-&gt;put($redis);
});
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis 实现消息队列]]></title>
        <id>http://weakcc.github.io/post/redis-shi-xian-xiao-xi-dui-lie/</id>
        <link href="http://weakcc.github.io/post/redis-shi-xian-xiao-xi-dui-lie/">
        </link>
        <updated>2021-06-18T03:44:12.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="消息队列是什么">消息队列是什么</h2>
<p><code>消息队列</code>：把要传输的数据放在队列中。消息是两个服务之间沟通的媒介，队列就是两个服务之间进行沟通消息的载体或容器。（把数据放到消息队列叫做<b>生产者</b>，从消息队列里面取数据叫做<b>消费者</b>）<br>
<img src="http://weakcc.github.io/post-images/1624000927881.png" alt="" loading="lazy"></p>
<ul>
    <li>生产者（producer）：用于组装消息，并将组装的消息通过 lpush（左进）的方式压入队列，供消费者消费此消息</li>
    <li>消费者（consumer）：用于将队列里面的消息按照<b>先进先出</b> rpop（右进） 的原则弹出队列容器中</li>
    <li>队列（queue）：用于承载消息的载体，在队列里面，被生产者压入的消息按照一定顺序进行存放，保证有序性</li>
</ul>]]></summary>
        <content type="html"><![CDATA[<h2 id="消息队列是什么">消息队列是什么</h2>
<p><code>消息队列</code>：把要传输的数据放在队列中。消息是两个服务之间沟通的媒介，队列就是两个服务之间进行沟通消息的载体或容器。（把数据放到消息队列叫做<b>生产者</b>，从消息队列里面取数据叫做<b>消费者</b>）<br>
<img src="http://weakcc.github.io/post-images/1624000927881.png" alt="" loading="lazy"></p>
<ul>
    <li>生产者（producer）：用于组装消息，并将组装的消息通过 lpush（左进）的方式压入队列，供消费者消费此消息</li>
    <li>消费者（consumer）：用于将队列里面的消息按照<b>先进先出</b> rpop（右进） 的原则弹出队列容器中</li>
    <li>队列（queue）：用于承载消息的载体，在队列里面，被生产者压入的消息按照一定顺序进行存放，保证有序性</li>
</ul>
<!-- more -->
<h2 id="为什么要使用消息队列">为什么要使用消息队列</h2>
<p>常用于解决并发系统中资源的一致性问题（超卖），提升峰值的处理能力，同时保证消息的顺序性、可恢复性、必送达性。<br>
核心作用：<code>异步</code>，<code>解耦</code>，<code>削峰</code>。<br>
优点：</p>
<ul>
    <li>异步处理（短信通知，终端状态推送，APP推送，用户注册）</li>
    <li>数据同步（业务数据推送同步）</li>
    <li>重试补偿（记账失败重试）</li>
    <li>系统解耦（通讯上下行，终端异常监控，分布式事件中心，订单仓储物流）</li>
    <li>流量削峰（秒杀场景下的下单处理）</li>
    <li>发布订阅（服务状态的变化通知，分布式事件中心）</li>
    <li>高并发缓冲（日志服务，监控上报）</li>
</ul>
缺点：
<ul>
    <li>系统可用性降低，系统引入的外部依赖越多</li>
    <li>系统复杂度提高</li>
    <li>一致性问题</li>
</ul>
<h2 id="基于-list-的-lpush-rpop-实现的生产消费模式">基于 list 的 lpush + rpop 实现的生产/消费模式</h2>
<p>优点：</p>
<ul>
    <li>低延迟（消息几乎无延迟）</li>
</ul>
缺点：
<ul>
    <li>做消费者确认 ACK 麻烦，不能保证消费者消费信息后是否成功处理的问题（宕机或处理异常等），通常需要维护一个 Pending（等待）列表，保证消息处理确认</li>
    <li>不支持分组消费</li>
    <li>不能重复消费，一旦消费就会删除</li>
    <li>不能做广播模式，如 pub/sub，消息发布/订阅模型</li>
</ul>
<h2 id="基于-pubsub-的发布订阅模式">基于 pub/sub 的发布/订阅模式</h2>
<p>此模式允许生产者只生产一次消息，由中间件负责将消息复制到多个消息队列，每个消息队列由对应的消费者组成消费。<br>
<code>pub/sub</code> 模式不适合做消息存储，消息积压类的业务，而是擅长处理广播，即时通讯，即时反馈的业务。<br>
优点：</p>
<ul>
    <li>典型的广播模式，一个消息可以发布到多个消费者</li>
    <li>多信道订阅，消费者可以同时订阅多个信道，从而接收多类消息</li>
    <li>消息即时发送，消息不用等待消费者读取，消费者会自动接收到信道发布的消息</li>
</ul>
缺点：
<ul>
    <li>消息一旦发布，不能接收。换句话说就是发布时若客户端不在线，则消息丢失，不能寻回</li>
    <li>若消费者客户端出现消息积压，到一定程度，会被强制断开，导致消息意外丢失。通常发生在消息的生产远大于消费速度时</li>
</ul>
<p>基于 <code>list</code> 实现的生产 / 消费模式队列，在应用中使用场景最为广泛。</p>
<h2 id="实现">实现</h2>
<pre><code class="language-php">class Queue
    /**
     * 准备处理消息key
     */
    public static $todoKey = 'TO_SEND_MSG';

    /**
     * 处理中消息key
     */
    public static $doingKey = 'SENDING_MSG';

    /**
     * 无限制阻塞
     */
    public static $timeout = 0;

    ...
</code></pre>
<h3 id="生产者实现">生产者实现</h3>
<pre><code class="language-php"> /**
     * 生产者
     */
    public function producer()
    {
        $userArr = [
          'user1@mail.com',
          'user2@mail.com',
          'user3@mail.com',
          'user4@mail.com',
          'user5@mail.com',
        ];

        Redis::lpush(self::$todoKey, ...$userArr);
        dd('生产者生产结束！');
    }
</code></pre>
<h3 id="如何消费">如何消费</h3>
<table>
<thead>
<tr>
<th style="text-align:center">消费触发方式</th>
<th style="text-align:center">特点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">死循环方式读取</td>
<td style="text-align:center">易实现，故障时无法及时恢复（比较适合做秒杀，比较集中，运维集中维护）</td>
</tr>
<tr>
<td style="text-align:center">定时任务</td>
<td style="text-align:center">压力均分，有处理上限；（需要合理设置时间间隔，不要等上一个任务没有完成下一个任务又开始了）</td>
</tr>
<tr>
<td style="text-align:center">守护进程</td>
<td style="text-align:center">类似于 php-fpm 和 php-cg, 需要 shell 基础，实现成本较高</td>
</tr>
</tbody>
</table>
<h3 id="消费者1">消费者1</h3>
<pre><code class="language-php">    public function consumer1()
    {
        /**
         * 循环执行消费
         */
        while (true) {
            $msg = Redis::rpop(self::$todoKey);
            if ($msg) {
                // TODO 发送消息业务
            }
        }
    }
</code></pre>
<p>存在的问题：当 <code>self::$todoKey</code> 为空的情况下，消费服务将会密集的向 <code>redis</code> 服务重复执行 <code>rpop</code> 命令，造成资源的浪费，对系统性能有严重折损，可以适当 <code>sleep</code> 一段时间</p>
<h3 id="消费者2">消费者2</h3>
<pre><code class="language-php">    public function consumer2()
    {
        /**
         * 循环执行消费
         */
        while (true) {
            $msg = Redis::rpop(self::$todoKey);
            if ($msg) {
                // TODO 发送消息业务
            } else {
                // 等待10s
                sleep(10);
            }
        }
    }
</code></pre>
<p>存在的问题：如果有消息在入队的情况下，程序还处于阻塞状态 <code>sleep</code>，程序将会无法及时响应消息，消息及时性会大打折扣（排除业务允许延迟的情况）</p>
<h3 id="消费者3">消费者3</h3>
<pre><code class="language-php">    public function consumer3()
    {
        /**
         * 循环执行消费
         */
        while (true) {
            // timeout=0 无限制阻塞式消费
            // 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
            $msg = Redis::brpop(self::$todoKey, self::$timeout);
            if ($msg) {
                // TODO 发送消息业务
            }
        }
    }
</code></pre>
<p>存在的问题：如果消费服务端出现异常，由于服务端没有进行备份，那么将会出现消息丢失</p>
<h3 id="消费者4">消费者4</h3>
<pre><code class="language-php">public function consumer4()
    {
        while (true) {
            do {
                // 循环阻阻塞执行，消费端取到消息的同时，原子性的把该消息放入一个正在处理中的$doingKey列表（进行备份）
                // 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
                $msg = Redis::brpoplpush(self::$todoKey, self::$doingKey, self::$timeout);
                try {
                    // TODO 发送消息业务
                    // 业务未出现异常，处理完业务后，则从正在处理的list中删除当前处理的消息,直到处理中 list 消息为空
                    Redis::lrem(self::$doingKey, 1, $msg);
                } catch (\Exception $e) {
                    // TODO 异常
                    /**
                     * 业务出现异常，处理异常
                     * 通常处理异常有两种方法
                     * 1.将异常消息重新放到待消费$todoKey的 list 中
                     * 2.单独处理异常消息（如发送邮件通知，人工处理）
                     * 3.单独起一个脚本程序，处理长时间存在于$doingKey list中的消息
                     */
                }
            } while (Redis::llen(self::$todoKey) || Redis::llen(self::$doingKey));
        }
    }
</code></pre>
<p>到此时，队列已经满足了安全和性能（高可用）的需求<br>
上面代码中利用 <code>brpoplpush</code> 在消费端取到消息的同时原子性的把该消息放入一个正在处理中的 $doingKey 列表中（进行备份）：</p>
<ul>
    <li>如果处理业务没有出现异常，那么业务处理完成后从正在处理中的 $doingKey 列表 lrem 删除当前已经处理 ok 的消息</li>
    <li>如果处理业务出现异常，我们已经在处理中的 $doingKey 列表中备份了异常消息，对于异常的消息，根据具体的业务需求实现</li>
</ul>
<h2 id="延迟消息队列">延迟消息队列</h2>
<p>生产者把消息发送到消息队列中以后，并不期望被立即消费，而是等待指定时间后才可以被消费者消费，这类消息通常被称为<b>延迟消息</b></p>
<h3 id="什么时候需要">什么时候需要</h3>
<p>数据量大，对实时性要求并不高</p>
<h3 id="场景">场景</h3>
<ul>
    <li>有效期：限时活动，拼团</li>
    <li>超时处理：取消超时未支付订单，超时自动确认收货</li>
    <li>延迟处理：机器人点赞 / 观看数 / 评论 / 关注，等待依赖条件</li>
    <li>重试：网络异常重试，打车派单，依赖条件为满足重试</li>
    <li>定时任务：智能设备定时启动</li>
</ul>
<h3 id="基于-key-的过期监听">基于 key 的过期监听</h3>
<p>实现原理：在Redis2.8之后的版本中，当我们将&lt;key, value&gt;对使用Redis缓存起来并设置缓存失效时间的时候，会触发Redis的键事件通知，客户端订阅这个通知事件，服务端会将对应的通知事件发送给每个订阅的客户端，然后客户端根据收到的通知，做相应的后续处理(例如：键过期时间通知对应的topic为:“keyevent@0:expired”)</p>
<p>在 redis.conf 设置</p>
<pre><code>notify-keyspace-events Ex
 
# x代表过期
</code></pre>
<p>实现思路：</p>
<ol>
    <li>起一个线程，开启对任务 key (如：未支付订单单号) 的 watch（监视）</li>
    <li>一旦 key 过期（订单未支付超时时间），触发 event（事件） 进行业务逻辑处理（取消订单）</li>
</ol>
<blockquote>
<p>这种方法处理起来简单，但是在数据量较大的情况下，这种方案对性能影响较大</p>
</blockquote>
<p>redis实例化类</p>
<pre><code class="language-php">//遇到类别重复的报错，所有叫Redis2
class Redis2   
{
    private $redis;
 
    public function __construct($host = '127.0.0.1', $port = 6379)
    {
        $this-&gt;redis = new Redis();
        $this-&gt;redis-&gt;connect($host, $port);
    }
 
    public function setex($key, $time, $val)
    {
        return $this-&gt;redis-&gt;setex($key, $time, $val);
    }
 
    public function set($key, $val)
    {
        return $this-&gt;redis-&gt;set($key, $val);
    }
 
    public function get($key)
    {
        return $this-&gt;redis-&gt;get($key);
    }
 
    public function expire($key = null, $time = 0)
    {
        return $this-&gt;redis-&gt;expire($key, $time);
    }
 
    public function psubscribe($patterns = array(), $callback)
    {
        $this-&gt;redis-&gt;psubscribe($patterns, $callback);
    }
 
    public function setOption()
    {
        $this-&gt;redis-&gt;setOption(\Redis::OPT_READ_TIMEOUT, -1);
    }

}
</code></pre>
<p>过期事件的订阅：psubscribe.php</p>
<pre><code class="language-php">require_once './Redis.class.php';
$redis = new \Redis2();
// 解决Redis客户端订阅时候超时情况
$redis-&gt;setOption();
$redis-&gt;psubscribe(array('__keyevent@0__:expired'), 'keyCallback');
// 回调函数,这里写处理逻辑
function keyCallback($redis, $pattern, $chan, $msg)
{
    echo &quot;Pattern: $pattern\n&quot;;
    echo &quot;Channel: $chan\n&quot;;
    echo &quot;Payload: $msg\n\n&quot;;
    //keyCallback为订阅事件后的回调函数，这里写业务处理逻辑，
    //比如前面提到的商品不支付自动撤单，这里就可以根据订单id,来实现自动撤单 
}
</code></pre>
<p>设置过期事件：index.php</p>
<pre><code class="language-php">require_once './Redis.class.php';
$redis = new \Redis2();
$order_id = 123;
$redis-&gt;setex('order_id',10,$order_id);
</code></pre>
<p>先用命令行模式执行 psubscribe.php<br>
在浏览器访问 index.php</p>
<h3 id="基于-zset-集合">基于 zset 集合</h3>
<p>实现思路：</p>
<ol>
    <li>利用 zadd 向集合中插入元素，以元素（订单）的时间戳（超时时间）作为 score</li>
    <li>利用 zrangebyscore 以【0 - 当前时间戳】进行获取需要处理的元素（即为超时待处理订单</li>
</ol>
<blockquote>
<p>zrangebyscore 返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列<br>
这种方法相较于上面方法，实现较为复杂，但是对性能保证较好，因此是应用最广泛的延迟队列实现方案</p>
</blockquote>
<h4 id="生成者">生成者</h4>
<pre><code class="language-php">    /**
     * 生产
     */
    public function producer()
    {
        $orderMap = [
            'orderNo.1' =&gt; time() + 10,//订单1需要10s之后进行消费处理
            'orderNo.2' =&gt; time() + 100,//订单2需要100s之后进行消费处理
            'orderNo.3' =&gt; time() + 1000,//订单3需要1000s之后进行消费处理
        ];
        Redis::connection()-&gt;zadd(self::$delayKey, $orderMap);
    }
</code></pre>
<p>利用 <code>zadd</code>，以延迟时间戳作为 <code>score</code>，元素唯一标志（订单号不重复）作为 <code>value</code>，向需要处理的 <code>key</code> 中插入元素</p>
<blockquote>
<p>因为是集合，因此需要保证集合元素的唯一性（score 可以相同）</p>
</blockquote>
<h4 id="消费者1-2">消费者1</h4>
<pre><code class="language-php">    /**
     * 消费
     */
    public function consumer1()
    {
        /**
         * 循环执行消费
         */
        while (true) {
            $msg = Redis::connection()-&gt;zrangebyscore(self::$delayKey, 0, time(), ['limit' =&gt; ['offset' =&gt; 0, 'count' =&gt; 1]]);
            if ($msg) {
                // 删除当前处理消息
                if (Redis::connection()-&gt;zrem(self::$delayKey, $msg)) {
                    // TODO 业务处理并返回处理结果
                }
            }
        }
    }
</code></pre>
<ol>
<li>利用 zrangebyscore 按照 score (此处为元素对应超时时间戳) 进行获取满足条件的集合元素（超时待取消订单）</li>
<li>当有满足的条件的元素（超时待取消订单）, 先删除该元素（保证不被其他进程取到），再进行业务逻辑处理</li>
<li>此处为了考虑性能，建议每次只处理 1（count=1）条消息数据，offset=0</li>
</ol>
<p>存在问题：延迟队列满足条件的元素为空（或者集合为空）时候，进程还会频繁不断向 redis 服务获取满足条件的元素，造成 redis 服务资源占用和浪费<br>
解决办法：可以在没有取到满足条件的时候让程序阻塞一段时间 unsleep(10000)</p>
<h4 id="消费者2-2">消费者2</h4>
<pre><code class="language-php">    /**
     * 消费
     */
    public function consumer2()
    {
        /**
         * 循环执行消费
         */
        while (true) {
            $msg = Redis::connection()-&gt;zrangebyscore(self::$delayKey, 0, time(), ['limit' =&gt; ['offset' =&gt; 0, 'count' =&gt; 1]]);
            if ($msg) {
                // 删除当前处理消息
                if (Redis::connection()-&gt;zrem(self::$delayKey, $msg)) {
                    // TODO 业务处理并返回处理结果
                }
            } else {
                /**
                 * 阻塞1s,减少redis服务资源浪费
                 */
                unsleep(1000000);
            }
        }
    }
</code></pre>
<p>存在问题：单机部署基本没有任何问题了，但是在分布式架构中，有可能出现 zrangebyscore 和 zrem 非同一个客户端的问题，即原子性问题<br>
解决办法：<code>Lua</code> 解决办法</p>
<h4 id="消费者3-2">消费者3</h4>
<pre><code class="language-php">
    /**
     * 消费
     * 没有备份机制的lua脚本
     */
    public function consumer3()
    {
        $luaScript = &lt;&lt;&lt;EOF
local delayKey = KEYS[1]
local start = ARGV[1]
local endTime = ARGV[2]
local limitNum = ARGV[3]
local result = redis.call('zrangebyscore',delayKey,start,endTime,'limit',0, limitNum)

if next(result) ~= nil  
then 
    local res = redis.call('zrem',delayKey,unpack(result))
    if res &gt; 0
    then
        return result
    end 
else
    return {}
end
EOF;
        /**
         * 循环执行消费
         */
        while (true) {
            $startTime = 0;
            $endTime   = time();
            $limit     = 1;
            /**
             * 为了防止并发，保证原子性操作
             * 利用lua脚本获取满足条件的消息，并删除满足条件消息
             * 返回满足条件的消息
             */
            $msg = Redis::connection()-&gt;eval($luaScript, 1, self::$delayKey, $startTime, $endTime, $limit);
            if ($msg) {
                // TODO 业务处理并返回处理结果
            } else {
                /**
                 * 阻塞1s,减少redis服务资源浪费
                 */
                unsleep(100000);
            }
        }
    }
</code></pre>
]]></content>
    </entry>
</feed>